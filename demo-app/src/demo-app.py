#!/usr/bin/env python3
# demo-app 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://documentation.dnanexus.com/developer for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import json
import dxpy

# Pandas is a third-party library, so for this import to work we need to have
# created a "DNAnexus asset", then include its ID in "assetDepends" of the
# dxapp.json configuration file.
import pandas

@dxpy.entry_point('main')
def main(input_file, n):

    # At entry, `input_file` is a Python dict containing a file ID, e.g.:
    # {'$dnanexus_link': 'file-GvQbF38JZ32v9X7F2jvBv4J3'}
    # Note that this is a file on your DNAnexus project folder
    print("input_file:", input_file)

    # If n has optional default value, it will be defined in the dxapp.json file
    print("n:", n)

    # The following initializes a DXFile object from the given file ID
    input_file = dxpy.DXFile(input_file)
    print("dxpy.DXFile(input_file):", input_file)
    print("type(dxpy.DXFile(input_file)):", type(input_file))

    # We can recover the original name of the file as follows:
    filename = input_file.describe()["name"]
    print("Original filename:", filename)

    # The following line grabs a copy of the file from your DNAnexus project
    # folder and into the job's scratch space
    dxpy.download_dxfile(
        input_file.get_id(),
        filename  # name to use for the file in the job's scratch space - we reuse the original name
    )

    # Fill in your application code here.

    # Now that `filename` exists in the job's scratch space, we can read it
    df = pandas.read_csv(filename, nrows=n)
    print("df:\n", df)

    # Sum of the first n rows of the second column
    asum = df.iloc[:n, 1].sum()

    # Prepare the output file
    res = {
        "input_file": filename,
        "n": n,
        "sum": asum,
    }

    # Write the output to a JSON file
    with open("demo-output.json", "w") as f:
        json.dump(res, f)

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.
    output_file = dxpy.upload_local_file("demo-output.json")

    # (I have no idea what this is for)
    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.
    output = {}
    output["output_file"] = dxpy.dxlink(output_file)

    return output

dxpy.run()
